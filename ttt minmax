import math

# Define the board
board = [
    ['_', '_', '_'],
    ['_', '_', '_'],
    ['_', '_', '_']
]

# Function to check if any player has won
def check_winner(board, player):
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]):
        return True

    if all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

# Function to check if the board is full
def is_full(board):
    return all([cell != '_' for row in board for cell in row])

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    if check_winner(board, 'X'):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = '_'
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = '_'
                    best_score = min(score, best_score)
        return best_score

# Function to find the best move
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = '_'
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Function to print the board
def print_board(board):
    for row in board:
        print(' '.join(row))
    print()

# Main function to play the game
def play_game():
    print("Initial Board:")
    print_board(board)

    while True:
        # Player X move
        x, y = map(int, input("Enter row and column (Player X): ").split())
        if board[x][y] == '_':
            board[x][y] = 'X'
        else:
            print("Invalid move. Try again.")
            continue

        print("Board after Player X's move:")
        print_board(board)

        if check_winner(board, 'X'):
            print("Player X wins!")
            break
        if is_full(board):
            print("It's a tie!")
            break

        # Computer's move
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = 'O'

        print("Board after Computer's move:")
        print_board(board)

        if check_winner(board, 'O'):
            print("Computer (Player O) wins!")
            break
        if is_full(board):
            print("It's a tie!")
            break

# Run the game
play_game()
